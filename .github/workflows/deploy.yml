name: Deploy

on:
  workflow_run:
    workflows: ["Pre-Deploy"]
    types:
      - completed

jobs:
  deploy:
    name: Deploy Infrastructure
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.CICD_DEPLOYMENT_ROLE }}
          aws-region: us-west-2

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: "1.7.0"

      - name: Terraform Init
        working-directory: ./infrastructure
        run: terraform init

      - name: Terraform Plan
        working-directory: ./infrastructure
        env:
          TF_VAR_agent_container_image: ${{ needs.build-agent.outputs.image }}
        run: terraform plan -input=false

      - name: Terraform Apply
        if: github.ref == 'refs/heads/main'
        working-directory: ./infrastructure
        env:
          TF_VAR_agent_container_image: ${{ needs.build-agent.outputs.image }}
        run: terraform apply -auto-approve -input=false

  update-ecs:
    name: Update ECS Service
    needs: deploy
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read

    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.CICD_DEPLOYMENT_ROLE }}
          aws-region: us-west-2

      - name: Register ECS Task Definition
        run: |
          TASK_DEFINITION=$(aws ecs describe-task-definition --task-definition agent-production || echo '{}')
          NEW_TASK_DEF=$(echo $TASK_DEFINITION | jq --arg IMAGE "${{ secrets.ECR_REGISTRY }}/agent:${{ github.sha }}" '.taskDefinition | .containerDefinitions[0].image = $IMAGE | del(.taskDefinitionArn, .revision, .status, .requiresAttributes, .compatibilities, .registeredAt, .registeredBy)')
          aws ecs register-task-definition --cli-input-json "$NEW_TASK_DEF"

      - name: Update ECS Service
        run: |
          aws ecs update-service --cluster just-track-it-production --service agent-production --force-new-deployment
