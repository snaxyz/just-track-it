name: Deploy

on:
  workflow_run:
    workflows: ["Pre-Deploy"]
    types:
      - completed

jobs:
  deploy:
    name: Deploy Infrastructure
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read

    outputs:
      ecs_cluster_name: ${{ steps.get_ecs_cluster_name.outputs.ecs_cluster_name }}
      ecs_agent_service: ${{ steps.get_ecs_agent_service.outputs.ecs_agent_service }}
      agent_ecs_task_definition_arn: ${{ steps.get_agent_ecs_task_definition_arn.outputs.agent_ecs_task_definition_arn }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.CICD_DEPLOYMENT_ROLE }}
          aws-region: us-west-2

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: "1.7.0"

      - name: Terraform Init
        working-directory: ./infrastructure
        run: terraform init

      - name: Terraform Plan
        working-directory: ./infrastructure
        env:
          TF_VAR_agent_container_image: ${{ needs.build-and-push-agent.outputs.agent_ecr_url }}:${{ github.sha }}
        run: terraform plan -input=false

      - name: Terraform Apply
        if: github.ref == 'refs/heads/main'
        working-directory: ./infrastructure
        env:
          TF_VAR_agent_container_image: ${{ needs.build-and-push-agent.outputs.agent_ecr_url }}:${{ github.sha }}
        run: terraform apply -auto-approve -input=false

      - name: Get Agent ECR Repository URL
        id: agent_ecr_url
        working-directory: ./infrastructure
        run: echo "AGENT_ECR_URL=$(terraform output -raw agent_ecr_repository_url)" >> $GITHUB_ENV

      - name: Get ECS Cluster Name
        id: get_ecs_cluster_name
        working-directory: ./infrastructure
        run: echo "::set-output name=ecs_cluster_name::$(terraform output -raw ecs_cluster_name)"

      - name: Get ECS Agent Service Name
        id: get_ecs_agent_service
        working-directory: ./infrastructure
        run: echo "::set-output name=ecs_agent_service::$(terraform output -raw ecs_agent_service)"

      - name: Get Agent ECS Task Definition ARN
        id: get_agent_ecs_task_definition_arn
        working-directory: ./infrastructure
        run: echo "::set-output name=agent_ecs_task_definition_arn::$(terraform output -raw agent_ecs_task_definition_arn)"

  update-ecs:
    name: Update ECS Service
    needs: deploy
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read

    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.CICD_DEPLOYMENT_ROLE }}
          aws-region: us-west-2

      - name: Register ECS Task Definition
        id: register_task
        run: |
          TASK_DEFINITION=$(aws ecs describe-task-definition --task-definition ${{ needs.deploy.outputs.agent_ecs_task_definition_arn }} || echo '{}')
          NEW_TASK_DEF=$(echo $TASK_DEFINITION | jq --arg IMAGE "${{ needs.build-and-push-agent.outputs.agent_ecr_url }}:${{ github.sha }}" '.taskDefinition | .containerDefinitions[0].image = $IMAGE | del(.taskDefinitionArn, .revision, .status, .requiresAttributes, .compatibilities, .registeredAt, .registeredBy)')
          aws ecs register-task-definition --cli-input-json "$NEW_TASK_DEF"

      - name: Update ECS Service
        run: |
          aws ecs update-service --cluster ${{ needs.deploy.outputs.ecs_cluster_name }} --service ${{ needs.deploy.outputs.ecs_agent_service }} --task-definition ${{ needs.deploy.outputs.agent_ecs_task_definition_arn }} --force-new-deployment
